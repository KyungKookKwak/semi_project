/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2019-01-03 11:19:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/header.jsp", Long.valueOf(1546514340694L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	//세션을 가져와서 로그인 상태일 경우 스케줄을 뿌릴 수 있는 리스트 반환


      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!doctype html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Alfa+Slab+One|Staatliches\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath() );
      out.write("/js/jquery-3.3.1.js\"></script>\r\n");
      out.write("    <title>Semiproject</title>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath() );
      out.write("/css/main.css\" />\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$(\"#login\").click(function(){\r\n");
      out.write("\t\talert(\"로그인 페이지로 이동!\");\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <nav>\r\n");
      out.write("    <div class=\"logo\">\r\n");
      out.write("      <img src=\"images/p3.jpg\" alt=\"\"width=\"30px\" height=\"30px\"> &nbsp;7 Scheduler </div>\r\n");
      out.write("    <div class=\"nav-main\">\r\n");
      out.write("        <ul>  \r\n");
      out.write("        <li id=\"login\">Login</li>\r\n");
      out.write("      </ul>\r\n");
      out.write("      <div class=\"clear\"></div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </nav>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  <div class=\"content\">\r\n");
      out.write("    <section>\r\n");
      out.write("       <div>\r\n");
      out.write("         <p>소개 랜딩 페이지</p>\r\n");
      out.write("         <br />\r\n");
      out.write("         <img src=\"images/p3.jpg\" alt=\"\" width=\"100px\" height=\" 30px\">\r\n");
      out.write("         \r\n");
      out.write("     \r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("         <br />\r\n");
      out.write("      \r\n");
      out.write("     \r\n");
      out.write("         \r\n");
      out.write("       \r\n");
      out.write("        \r\n");
      out.write("         \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("       </div>\r\n");
      out.write("   \r\n");
      out.write("      </section>\r\n");
      out.write("    </div>\r\n");
      out.write("           <footer>\r\n");
      out.write("       <span>Copyrightⓡ windowSide Front Group: semiProject </span>\r\n");
      out.write("           </footer>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write(" \r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("(function($) {\r\n");
      out.write("  $.fn.semisticky = function(options) {\r\n");
      out.write("  return this.each(function() {\r\n");
      out.write("    new SemiSticky($(this), options);\r\n");
      out.write("  });\r\n");
      out.write("  };\r\n");
      out.write("}(jQuery));\r\n");
      out.write("\r\n");
      out.write("var SemiSticky = function(element, options) {\r\n");
      out.write("  var _this = this;\r\n");
      out.write("  \r\n");
      out.write("  options = $.extend({\r\n");
      out.write("  offsetLimit: element.outerHeight(),\r\n");
      out.write("  scrollThreshold: 50,\r\n");
      out.write("  onScroll: function() {}\r\n");
      out.write("  }, options);\r\n");
      out.write("  \r\n");
      out.write("  this.element = element;\r\n");
      out.write("  this.state = 'fixed';\r\n");
      out.write("  this.currentOffsetAmount = 0;\r\n");
      out.write("  \r\n");
      out.write("  this.init = function() {\r\n");
      out.write("  var oldScrollTop = $(document).scrollTop();\r\n");
      out.write("  var thresholdCounter = 0;\r\n");
      out.write("  \r\n");
      out.write("  $(window).on('scroll.semisticky', function() {\r\n");
      out.write("    var newScrollTop = $(document).scrollTop();\r\n");
      out.write("    var delta = oldScrollTop - newScrollTop;\r\n");
      out.write("    thresholdCounter = Math.min(Math.max(thresholdCounter + delta, -options.scrollThreshold), options.scrollThreshold);\r\n");
      out.write("    var newOffset;\r\n");
      out.write("\r\n");
      out.write("    if (Math.abs(thresholdCounter) >= options.scrollThreshold || _this.state == 'scrolling') {\r\n");
      out.write("    if (delta < 0 && _this.state !== 'hidden') {\r\n");
      out.write("      \r\n");
      out.write("      if (_this.currentOffsetAmount > -options.offsetLimit) {\r\n");
      out.write("      _this.currentOffsetAmount = Math.max(_this.currentOffsetAmount + delta, -options.offsetLimit);\r\n");
      out.write("      _this.element.css('top', _this.currentOffsetAmount);\r\n");
      out.write("      _this.state = 'scrolling';\r\n");
      out.write("      } else {\r\n");
      out.write("      _this.state = 'hidden';\r\n");
      out.write("      thresholdCounter = 0;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("    } else if (delta > 0 && _this.state !== 'fixed') {\r\n");
      out.write("      \r\n");
      out.write("      if (_this.currentOffsetAmount < 0) {\r\n");
      out.write("      _this.currentOffsetAmount = Math.min(_this.currentOffsetAmount + delta, 0);\r\n");
      out.write("      _this.element.css('top', _this.currentOffsetAmount);\r\n");
      out.write("      _this.state = 'scrolling';\r\n");
      out.write("      } else {\r\n");
      out.write("      _this.state = 'fixed';\r\n");
      out.write("      thresholdCounter = 0;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("    }\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    options.onScroll.call(_this, delta);\r\n");
      out.write("    \r\n");
      out.write("    oldScrollTop = newScrollTop;\r\n");
      out.write("  });\r\n");
      out.write("  };\r\n");
      out.write("  \r\n");
      out.write("  this.die = function() {\r\n");
      out.write("  $(window).off('scroll.semisticky');\r\n");
      out.write("  };\r\n");
      out.write("  \r\n");
      out.write("  this.init();\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("    $('nav').semisticky({\r\n");
      out.write("      offsetLimit: $('.nav-actions').outerHeight(),\r\n");
      out.write("    })\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
